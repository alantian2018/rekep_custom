import h5py
import os
import torch
import argparse
import numpy as np
# Define a helper function to filter the data based on success/fail and contact rich

def filter_contact_rich(substage_trajectory, with_contact_rich):
        # Given one substrage traj, extract the non contact rich paths.
        
        path_data=substage_trajectory['path']

        obs =          np.array(path_data[0])
        actions =      np.array(path_data[1])
        rewards =      np.array(path_data[2])
        dones   =      np.array(path_data[3])
        contact_rich = np.array(path_data[7])  # contact rich boolean array

        if not with_contact_rich:

            contact_rich_indices = np.where(contact_rich)[0]
            if len(contact_rich_indices) > 0:
              
                first_contact_rich_index = contact_rich_indices[0]
                # Truncate arrays to exclude all steps after the first contact_rich=True
                obs = obs[:first_contact_rich_index]
                actions = actions[:first_contact_rich_index]
                rewards = rewards[:first_contact_rich_index]
                dones = dones[:first_contact_rich_index]
                contact_rich = contact_rich[:first_contact_rich_index]

        # If we pass all conditions, return the filtered data
        return obs, actions, rewards,dones, contact_rich

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', type=str, help='path to dataset generated by isaac sim')
    args = parser.parse_args()

    if (args.path.endswith('.pkl')):
        args.path = os.path.dirname(args.path)
    
    data = torch.load(
        os.path.join(
            args.path,
            'raw.pkl'
             )
    )
    paths,  rekep_program_dir = data[0],data[1]

    demo_counter = 0
    substage_by_trajectory = dict()
    for traj in paths:
        # first things first, split the trajectory into different substages
        for substage_traj in traj[1:]:
            stage = substage_traj['stage']
            if stage in substage_by_trajectory:
                substage_by_trajectory[stage].append(substage_traj)
            else:
                substage_by_trajectory[stage] = [substage_traj]
    
    #now, we have substages by trajectories. For each substage, create 4 hdf5 files. Each substage_traj counts as a demo.
    for with_fail in [True, False]:  # Separate processing for with and without failures
        for with_contact_rich in [True, False]:  # Process for contact-rich and non-contact-rich cases
            demo_counter = 0  # Reset demo counter for each file
            file_suffix = f"{'with_fail' if with_fail else 'only_success'}_{'with_contact_rich' if with_contact_rich else 'no_contact_rich'}"
            file_name = f"{file_suffix}.hdf5"
            file_folder = os.path.join(args.path, f'stage_{stage}')
            os.makedirs(file_folder, exist_ok=True)

            file_path = os.path.join(file_folder,  file_name)
            with h5py.File(file_path, "w") as hf:
                data_group = hf.create_group("data")
                for stage, substage_trajectories in substage_by_trajectory.items():
                    
                    for substage_trajectory in substage_trajectories:
                        did_fail =  substage_trajectory['fail']
                        if not with_fail and did_fail:
                            continue
                        
                        obs,actions,rewards,dones, contact_rich = filter_contact_rich(substage_trajectory, with_contact_rich)
                        
                        # Create group for each demonstration
                        demo_group = data_group.create_group(f"demo_{demo_counter}")
                        demo_group.create_dataset("obs/all", data=obs)
                        demo_group.create_dataset("actions", data=actions)
                        demo_group.create_dataset("rewards", data=rewards)
                        demo_group.create_dataset('dones',data=dones)
                      
                        if with_contact_rich:
                            demo_group.create_dataset("contact_rich", data=contact_rich)
                        demo_group.attrs["num_samples"] = len(actions)  # Assuming obs length equals sample count
                        demo_group.attrs["success"] = not did_fail  # Add success/failure label

                        demo_counter += 1

                 
                hf.attrs['rekep_program_dir'] =  rekep_program_dir if rekep_program_dir else "None"


                val_ratio = 0.1
                trajs = np.arange(demo_counter)
                num_val = int(val_ratio * len(paths))
                validation_trajectories = np.random.choice(trajs, size=num_val, replace=False)
                mask_group = hf.create_group("mask")
                mask_group.create_dataset('validation', data=[f'demo_{i}' for i in validation_trajectories])

                train = []
                for i in trajs:
                    if i not in validation_trajectories:
                        train.append(f'demo_{i}')
                mask_group.create_dataset('train', data=train)

                print(f"Saved HDF5 for stage {stage} ({file_suffix}): {file_path}")

    print("All datasets processed and saved.")
